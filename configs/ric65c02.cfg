; C02 Operating System
; build.cfg: Kernel Build Configuration

; Enter any amount of zero-padding in bytes to prepend to the file
; Comment this out for no padding (recommended for most builds)

; CONFIG_PREPEND=$0100

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Debugging functionality

; Debugging will make C02 bigger and a little slower, but it will print
; messages and provide services that will help you debug C02 and your
; programs.

CONFIG_DEBUG=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Preset builds for known systems

; FOR C64, YOU _MUST_ manually undefine CONFIG_BUILD_ROM below unless you
; are making an image for burning into some type of PROM.

; Commodore 64 computer
; CONFIG_ARCH_C64=1

; Commodore VIC-20 computer
; CONFIG_ARCH_VIC20=1

; Commodore 64 computer with CMD SuperCPU
; CONFIG_ARCH_C64SCPU=1

; Nintendo Entertainment System/Famicom
; CONFIG_ARCH_NES=1

; Daryl Rictor's 65C02 SBC simulator
CONFIG_ARCH_RIC65C02=1


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generic build configuration

; DO NOT use this section if you're building for a SUPPORTED system.
; This is for advanced users ONLY.  Standard builds need this stuff to
; be commented out.

; All items between the semicolon lines are for custom builds
; Comment these out if you're using a different CONFIG_ARCH_xxx
; DON'T FORGET TO SET RESVEC if you use custom initializing code!

; If this is commented out, this entire section will be ignored.
; CONFIG_ARCH_GENERIC=1
; CONFIG_ARCH_GENERIC_INIT=$e800
; CONFIG_ARCH_GENERIC_CORE=$f000

; Target architecture CPU optimization
; Selecting CONFIG_6502 is most compatible and safe.

; CONFIG_ARCH_GENERIC_6502=1
; CONFIG_ARCH_GENERIC_65C02=1
; CONFIG_ARCH_GENERIC_65816EMU=1
; CONFIG_ARCH_GENERIC_65816=1

; If you're attaching a custom initial task, define this.
; Be sure to undefine CONFIG_ARCH_GENERIC_INIT if you do.
CONFIG_CUSTOM_INIT_TASK=1

; If you have a 6510 CPU (something that's not RAM at $00-$01)
; you need to define this to make sure it doesn't get accessed
; as kernel variable storage locations.
; CONFIG_ARCH_GENERIC_6510=1

; CONFIG_ARCH_GENERIC_RAM_AT_FF_PAGE should be set ONLY in the case that
; if you have RAM at $fff0-$ffff (it adds code to write vectors to that
; area of memory that will already be there if it's a ROM)
; CONFIG_ARCH_GENERIC_RAM_AT_FF_PAGE=1

; CONFIG_ARCH_GENERIC_CONTEXT_PAGE is the page used for holding contexts
; CONFIG_ARCH_GENERIC_CONTEXT_PAGE=$0200

; CONFIG_ARCH_GENERIC_MEMORYMAP is the page used for malloc/mfree mapping
; CONFIG_ARCH_GENERIC_MEMORYMAP=$0300

; This will hard-code the reset/IRQ/NMI vectors at the top of a ROM
; Set CONFIG_ARCH_GENERIC_NULL_NMI if you don't want NMI to do anything
; Otherwise, you need to set the variable nmi in a label somewhere
; in the kernel where you want NMI to be handled.
; CONFIG_ARCH_GENERIC_NULL_NMI=1

; Set this to the location for the common API jump table
; CONFIG_ARCH_GENERIC_JMPTABLE_BASE=$fe00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RESVEC directive removed--be sure to start any replacement to the
; standard INIT code with the global label RESVEC

; CONFIG_NES_HEADER will prepend an iNES header for use as a ROM file
; CONFIG_NES_HEADER=1

; If you want the general init code (most systems will) set this.
; In fact, don't unset this unless you're tacking custom initialization
; code onto the kernel somewhere.
CONFIG_USE_INIT_CODE=1

; If you're building C02 for a ROM, set this--it will expand the kernel
; image to $ffff and write applicable vectors at the top of memory.
; For generic builds, unset CONFIG_ARCH_GENERIC_RAM_AT_FF_PAGE to use this.
; CONFIG_BUILD_ROM=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Various device drivers to include

; CONFIG_INPUT_C64_KEY=1

; CONFIG_INPUT_NES_PAD=1

; CONFIG_INPUT_SIMTERM=1   ;Includes output routines

; CONFIG_CIA_C64=1

; CONFIG_SERIAL_6551=1

; CONFIG_SERIAL_6551_BASE=$df00

; CONFIG_VIC_I=1

; CONFIG_VIC_II=1

; CONFIG_NES_PPU=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Advanced Build Options

; DO NOT SET THESE unless you know what you are doing.  These options may
; disable critical parts of the system and cause programs to fail in very
; strange ways if not used properly.

; Critical section support disable (also removes support code from IRQ)
;CONFIG_ADV_NO_CRITICAL=1

; Remove 8-byte user zero page space from context switcher
; You might as well dump Syslib if you do this, as it requires
; up to six of the eight bytes to do work or pass data.
;CONFIG_ADV_NO_ZPCONTEXT=1

; Remove Syslib from build entirely (also removes jump table)
; Setting CONFIG_ADV_NO_CRITICAL above will remove task switch disabling
; functions if not needed outside of Syslib.
; Many drivers require some of the functions in Syslib to operate!
;CONFIG_ADV_NO_SYSLIB=1

