                      C02 OS Driver/API Documentation
                    Syslib:  C02 System Function Library
                      ===============================

This file is part of the C02 OS API documentation.

SYSLIB DESCRIPTION

Syslib is the C02 OS core system library.  It provides re-entrant system
calls that provide a common interface across different platforms and drivers.
Syslib's provided services and features include:

* Number-based device I/O
* Common key input queue service
* Re-entrant code
* Locked resources do not make programs sleep, allowing maximum control
  over potential deadlock or resource-hog problems by the programmer
* Minimal locking on system calls to minimize latency

SYSLIB-PROVIDED SYSTEM CALLS

CLASS = CHAR, character-based I/O
---------------------------------

NAME:  getchar
USES:  A X
USAGE:  Load X with the character device number to access.  If carry bit is
        clear, A contains the next character from the device.  If carry bit
        is set, A contains the device error number.

NAME:  putchar
USES:  A X Y
USAGE:  Load X with the character device number to access.  Load A with the
        character to send to the device.  If carry bit is clear, the write
        was successful.  If carry bit is set, A contains the device error
        number.

NAME:  putstring
USES:  A X Y ZP[0,1,2,3]
USAGE:  Load X with the character device number to access.  Set the vector
        at ZP0/1 to the location of the string to print.  The string must
        be terminated with a null ($00) character.  This routine is a
        wrapper for putchar and returns any error putchar returns to it.

NAME:  queuekey
USES:  A X
USAGE:  Load A with the byte to add to the system's keyboard queue.  If the
        keyboard queue is full, carry will be set and A will contain the
        error code 3 (the only valid error code for this operation).  This
        call is used primarily by keyboard drivers, but is useful if you
        want to force a key into the keyboard queue for some reason.

NAME:  byte2hex
USES:  A X ZP[0,1,2]
USAGE:  Load the byte to decode into ASCII hexadecimal digits into ZP0.
        The converted high and low characters will be in ZP1 and ZP2,
        respectively.

CLASS = DEBUG/PANIC, debugging extensions
-----------------------------------------

NAME:  debugprint
USES:  (none)
USAGE:  Call criticalsection first.  Load the "debugmessage" vector with the
        location of the CR-terminated debug string and call this routine.
        The message will be printed to the console device, saving the entire
        current process state.  Call uncriticalsection after this call is
        completed.  Note that this call will PANIC if the console device
        returns an error.

NAME:  kernelpanic
USES:  (N/A)
USAGE:  Freezes the entire system, after printing out potentially useful
        debugging information.  This includes the current processor state
        as of the panic call, the address + 2 of the JSR that called, and
        a stack dump to the console.

CLASS = CRITICAL, critical section management
---------------------------------------------

NAME:  criticalsection
USES:  (none)
USAGE:  Calling this will disable task switches but leaves IRQ/NMI servicing
        hooks functional.  If you must disable IRQs, do so very sparingly and
        before you call this function.

NAME:  uncriticalsection
USES:  (none)
USAGE:  Calling this will enable task switches.  This is the reverse of
        calling criticalsection.  If you disable interrupts in your program,
        you should enable them after calling this function to ensure proper
        system operation.

CLASS = MATH, common math functions
-----------------------------------

NAME:  multiply8
USES:  A X Y ZP[0,1]
USAGE:  Place the 8-bit unsigned number to be multiplied in ZP1, place the
        multiplier in X.  Call this routine.  The 16-bit result will be
        placed in ZP0/ZP1, with ZP1 being the high byte.  This ordering is
        used so that the result can be used as a vector without changes.

CLASS = MEMORY, memory manipulation routines
--------------------------------------------

NAME:  blockmovedown
USES:  A X Y ZP[0,1,2,3,4,5]
USAGE:  Place the vector for the *destination* start of data in ZP0/ZP1.
        Place the vector for start of data to be moved in ZP2/ZP3.  Place
        the vector for the last byte of data to be moved in ZP4/ZP5 and then
        issue this call.  The data in memory from start to end will be moved
        down in memory so that it starts at the destination start address.
        Take care that ZP2/ZP3 is ALWAYS LESS than ZP4/ZP5 or unpredictable
        results may occur.

NAME:  blockmoveup
USES:  A X Y ZP[0,1,2,3,4,5]
USAGE:  Place the vector for the destination *end* of data in ZP0/ZP1.
        Place the vector for the last byte of data to be moved in ZP2/ZP3.
        Place the vector for the start of data to be moved in ZP4/ZP5 and
        issue this call.  The data in memory from start to end will be moved
        up in memory so that it ends at the destination end address.
        Take care that ZP2/ZP3 is ALWAYS MORE than ZP4/ZP5 or unpredictable
        results may occur.

NAME:  pagefill
USES:  A Y ZP[0,1,2]
USAGE:  Set the vector at ZP0/ZP1 to the starting point.  Set ZP2 to the
        number of bytes to fill, where $00 is one and $ff is 256 (one memory
        page).  Set A to the byte you want the memory to be filled with.

NAME:  pagemove
USES:  A X Y ZP[0,1,2,3,4]
USAGE:  Set the vector at ZP0/ZP1 to start of data.  Set ZP2/ZP3 to new
        start of data.  Set ZP4 to the number of bytes to move, where $00 is
        one and $ff is 256 (one memory page).  This routine is faster than a
        block move but cannot move more than 256 bytes of data at a time.

CLASS = MM, memory management calls
-----------------------------------

NAME:  malloc
USES:  A X Y
USAGE:  Set A to the number of 256-byte memory pages desired and call.  If
        the allocation is successful, carry will be clear, A will contain
        the starting page of the memory block, and X will contain the
        number of pages allocated (same as requested).

NAME:  mfree
USES:  A X Y
USAGE:  Set A to the start page of the block, set X to the number of pages
        to free.  The PID that allocated those pages will be checked against
        the current PID, and only if they are equal will the blocks be freed.
        If carry is clear, all is well.

CLASS = PROCESS, process management calls
-----------------------------------

NAME:  breakexec
USES:  (none)
USAGE:  Call this to return control to the operating system by simulating an
        IRQ.  If you use the BRK instruction instead of calling this, the
        IRQ code will consider it an unexpected BRK instruction (which tends
        to indicate a crappy programming bug) and the current process will
        be immediately terminated.

NAME:  createpid
USES:  

NAME:  getcpid
USES:  A X
USAGE:  Calling this will return the PID for the currently running task in
        A.

NAME:  killpid
USES:  A X Y
USAGE:  Calling killpid with the current process ID in A will terminate that
        process without question.  If the process is not located in the
        PIT, an error will be returned.

NAME:  killcpid
USES:  A X Y
USAGE:  This call will call getcpid before executing killpid.  The result is
        termination of the currently executing process.  This is useful in
        two scenarios:  a process wants to terminate, or IRQ code wants to
        terminate the current process because of a problem.

